(* ****** ****** *)

%{
implement srcfilename_get () = "../bool.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_bool")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/bool\
")

(* ****** ****** *)

#declpreamble('\

#para('\
This package contains various functions on booleans values.
')

')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("g0ofg1_bool")
#declnamesynop("g1ofg0_bool")

(* ****** ****** *)

#declnamesynop("int2bool0")
#decldescrpt('\
This function maps any nonzero integer to #dyncode("true") and zero
to #dyncode("false").
')
#declnamesynop("int2bool1")
#decldescrpt('\
This function does the same as #dyncode("int2bool0") at run-time.
')

(* ****** ****** *)

#declnamesynop("bool2int0")
#decldescrpt('\
This function maps #dyncode("true") and #dyncode("false") to 1 and 0, respectively.
')
#declnamesynop("bool2int1")
#decldescrpt('\
This function does the same as #dyncode("bool2int0") at run-time.
')

(* ****** ****** *)

#declnamesynop("add_bool0_bool0")
#decldescrpt('\
This function returns the disjunction of two given boolean values.
Note that the two arguments of this function are evaluated before they
are passed.
')
#declnamesynop("add_bool1_bool1")
#decldescrpt('\
This function does the same as #dyncode("add_bool0_bool0") except for
having a more informative type.\
')

(* ****** ****** *)

#declnamesynop("mul_bool0_bool0")
#decldescrpt('\
This function returns the conjunction of two given boolean values.
Note that the two arguments of this function are evaluated before they
are passed.
')
#declnamesynop("mul_bool1_bool1")
#decldescrpt('\
This function does the same as #dyncode("mul_bool0_bool0") except for
having a more informative type.\
')

(* ****** ****** *)

#declnamesynop("xor_bool0_bool0")
#decldescrpt('\
This function is equivalent to #dyncode("neq_bool0_bool0").
In other words, it returns true if and only if its two arguments are not equal.
')

(* ****** ****** *)

#declnamesynop("lt_bool0_bool0")
#declnamesynop("lte_bool0_bool0")
#declnamesynop("gt_bool0_bool0")
#declnamesynop("gte_bool0_bool0")

(* ****** ****** *)

#declnamesynop("eq_bool0_bool0")
#decldescrpt('\
This function tests whether two given booleans are equal.
')

#declnamesynop("neq_bool0_bool0")
#decldescrpt('\
This function tests whether two given booleans are not equal.
')

(* ****** ****** *)

#declnamesynop("print_bool")
#declnamesynop("prerr_bool")
#declnamesynop("fprint_bool")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("g0ofg1")
#declnamesynop("g1ofg0")

(* ****** ****** *)

#declnamesynop("+")
#declnamesynop("*")

(* ****** ****** *)

#declnamesynop("=")
#declnamesynop("!=")

(* ****** ****** *)

#declnamesynop("print")
#declnamesynop("prerr")
#declnamesynop("fprint")

(* ****** ****** *)

(* end of [bool.atxt] *)
