(* ****** ****** *)

%{
implement srcfilename_get () = "../matrix.sats"
%}

<(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_matrix")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/matrix\
")

(* ****** ****** *)

#declnamesynop("matrix")
#declnamesynop("matrix_vt0ype_int_int_vt0ype")

(* ****** ****** *)

#declnamesynop("matrix_v")
#declnamesynop("matrow_v")
#declnamesynop("matcol_v")

(* ****** ****** *)

#declnamesynop("matrix2array_v")
#decldescrpt('\

This proof function turns a proof of matrix-view into another proof of
array-view.\

')

(* ****** ****** *)

#declnamesynop("array2matrix_v")
#decldescrpt('\

This proof function turns a proof of array-view into another proof of
matrix-view.\

')

(* ****** ****** *)

#declnamesynop("matrix_get_at")
#decldescrpt('\

Note that the width (that is, number of columns) must be provided in order
to access a matrix-cell.\

')
#declnamesynop("matrix_get_at_int")
#declnamesynop("matrix_get_at_size")

(* ****** ****** *)

#declnamesynop("matrix_set_at")
#decldescrpt('\

Note that the width (that is, number of columns) must be provided in order
to access a matrix-cell.\

')
#declnamesynop("matrix_set_at_int")
#declnamesynop("matrix_set_at_size")

(* ****** ****** *)

#declnamesynop("matrix_exch_at")
#decldescrpt('\

Note that the width (that is, number of columns) must be provided in order
to access a matrix-cell.\

')
#declnamesynop("matrix_exch_at_int")
#declnamesynop("matrix_exch_at_size")

(* ****** ****** *)

#declnamesynop("matrix_ptr_takeout_elt")
#declnamesynop("matrix_ptr_takeout_row")
#declnamesynop("matrix_ptr_takeout_col")

(* ****** ****** *)

#declnamesynop("matrix_ptr_alloc")
#decldescrpt('\

This function calls #dyncode("malloc_gc") to allocate memory for storing a
matrix of the given dimension. Note that the second returned proof needs to
be present in order to free the allocated memory.\

')

(* ****** ****** *)

#declnamesynop("matrix_ptr_free")
#decldescrpt('\

This function frees the memory of a matrix. Note that both a proof of the
view of the matrix and a proof of the free-view of the memory need to be
present.\

')

(* ****** ****** *)

#declnamesynop("matrix_ptr_tabulate")
#decldescrpt('\

This function creates a matrix of a given dimension.  For each valid
index-pair (i, j), the content of matrix-cell (i, j) is initialized by the
return value of a call to #dyncode("matrix_tabulate$fopr").

')

#declnamesynop("matrix_tabulate$fopr")

(* ****** ****** *)

#declnamesynop("fprint_matrix")
#declnamesynop("fprint_matrix_int")
#declnamesynop("fprint_matrix_size")
#declnamesynop("fprint_matrix$sep1")
#declnamesynop("fprint_matrix$sep2")

(* ****** ****** *)

#declnamesynop("fprint_matrix_sep")

(* ****** ****** *)

#declnamesynop("matrix_foreach")
#declnamesynop("matrix_foreach_env")
#declnamesynop("matrix_foreach$fwork")

(* ****** ****** *)

#declnamesynop("matrix_foreachrow")
#declnamesynop("matrix_foreachrow_env")
#declnamesynop("matrix_foreachrow$fwork")

(* ****** ****** *)

#declnamesynop("matrix_initize")
#declnamesynop("matrix_initize$init")

(* ****** ****** *)

#declnamesynop("matrix_mapto")
#declnamesynop("matrix_mapto$fwork")

#declnamesynop("matrix_map2to")
#declnamesynop("matrix_map2to$fwork")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("[]")

(* ****** ****** *)

#declnamesynop("fprint")

(* ****** ****** *)

(* end of [matrix.atxt] *)
