(* ****** ****** *)

%{
implement srcfilename_get () = "../matrixptr.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_matrixptr")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/matrixptr\
")

(* ****** ****** *)

#declpreamble('\

#para('\

This package contains some common functions for creating/freeing and
manipulating linear matrixptr-values, which are just pointers to matrices
without dimension information attached.

')

')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("matrixptr")
#declnamesynop("matrixptr_vt0ype_addr_int_int_vtype")

(* ****** ****** *)

#declnamesynop("lemma_matrixptr_param")

(* ****** ****** *)

#declnamesynop("matrixptr_make_elt")

(* ****** ****** *)

#declnamesynop("matrixptr_get_at")
#declnamesynop("matrixptr_get_at_int")
#declnamesynop("matrixptr_get_at_size")

(* ****** ****** *)

#declnamesynop("matrixptr_set_at")
#declnamesynop("matrixptr_set_at_int")
#declnamesynop("matrixptr_set_at_size")

(* ****** ****** *)

#declnamesynop("matrixptr_exch_at")
#declnamesynop("matrixptr_exch_at_int")
#declnamesynop("matrixptr_exch_at_size")

(* ****** ****** *)

#declnamesynop("fprint_matrixptr")
#declnamesynop("fprint_matrixptr_sep")

(* ****** ****** *)

#declnamesynop("matrixptr_tabulate")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("[]")

(* ****** ****** *)

#declnamesynop("ptrcast")

(* ****** ****** *)

#declnamesynop("fprint")

(* ****** ****** *)

(* end of [matrixptr.atxt] *)
