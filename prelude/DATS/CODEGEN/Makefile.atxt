%{
//
staload
STDIO = "libc/SATS/stdio.sats"
staload TIME = "libc/SATS/time.sats"
//
dynload "libatsdoc/dynloadall.dats"
//
staload "libatsdoc/SATS/libatsdoc_atext.sats"
//
%}\
%{

fun comment
  (x: string): atext = atext_nil ()
// end of [comment]

fun make_entry
  (nm: string): atext = let
//
val ent = sprintf
("\
all:: %s.dats\n\
%s.dats: %s_atxt.exe ; ./$< > $@\n\
%s_atxt.exe: %s_atxt.dats\n\
	$(ATSCC) $(ATSGCFLAG) -o $@ %s_atxt.dats -latsdoc\n\
%s_atxt.dats: %s.atxt\n\
	$(ATSDOC) --outcode $@ -i %s.atxt > %s_atxt.txt\n\
clean:: ; $(RMF) %s_atxt.exe\n\
cleanall:: ; $(RMF) %s.dats\n\
", @(nm, nm, nm, nm, nm, nm, nm, nm, nm, nm, nm, nm)
) // end of [val]
//
val ent = string_of_strptr (ent)
in
  atext_strcst (ent)
end // end of [make_entry]

%}\
#
#
# A simple Makefile
#
#

######

ATSHOMEQ="$(ATSHOME)"
ATSCC=$(ATSHOMEQ)/bin/atscc
ATSOPT=$(ATSHOMEQ)/bin/atsopt
ATSDOC=$(ATSHOMEQ)/bin/atsdoc

######

ATSGCFLAG=-D_ATS_GCATS

######

all::

######

#make_entry("arith_prf")

#make_entry("pointer")
#make_entry("integer")
#make_entry("integer_fixed")

#make_entry("bool")
#make_entry("char")
#make_entry("float")

#make_entry("memory")

#make_entry("string")
#make_entry("strptr")

#make_entry("reference")

#make_entry("tuple")

#make_entry("filebas")
#make_entry("filebas_prf")
#make_entry("intrange")

#make_entry("basics")

#make_entry("gorder")
#make_entry("gorder_int")
#make_entry("gorder_uint")
#make_entry("gorder_bool")
#make_entry("gorder_char")
#make_entry("gorder_float")
#make_entry("gorder_string")

#make_entry("gnumber")
#make_entry("gnumber_int")
#make_entry("gnumber_uint")
#make_entry("gnumber_float")

#make_entry("unsafe")
#make_entry("checkast")

#make_entry("list")

#make_entry("list_vt")
#make_entry("list_vt_mergesort")
#make_entry("list_vt_quicksort")

#make_entry("option")
#make_entry("option_vt")

#make_entry("array")
#make_entry("array_prf")
#make_entry("array_bsearch")
#make_entry("array_quicksort")

#make_entry("arrayptr")
#make_entry("arrayref")

#comment('\
for pointer arrays terminated with the null pointer\
')
#make_entry("parray")

#make_entry("matrix")
#make_entry("matrixptr")
#make_entry("matrixref")

#make_entry("gprint")

######

RMF=rm -f

######

clean:: ; $(RMF) *~
clean:: ; $(RMF) *_?ats.o *_?ats.c
clean:: ; $(RMF) *_atxt.txt
clean:: ; $(RMF) *_atxt.dats

cleanall:: clean

###### end of [Makefile] ######
\
%{
implement main () = fprint_filsub (stdout_ref, "Makefile_atxt.txt")
%}\
