(* ****** ****** *)

%{
implement srcfilename_get () = "../strarr.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_ML_strarr")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/ML/strarr\
")

(* ****** ****** *)

#declpreamble("\

The functions declared in this package are primarily for processing strings
in functional programming, where a string is represented as an array of
characters plus its size. Sometimes, the name #emph("strarr-value") is used
to refer to such a string.

")

(* ****** ****** *)

#declnamesynop("strarr")
#declnamesynop("strarr_type")

(* ****** ****** *)

#declnamesynop("strarr2array")
#decldescrpt("\
This cast function turns a strarr-value to an array of characters.\
")

#declnamesynop("array2strarr")
#decldescrpt("\
This cast function turns an array of characters to a strarr-value.\
")

(* ****** ****** *)

#declnamesynop("strarr_make_string")
#decldescrpt("\

This function, which overloads the symbol #dyncode("strarr"), builds
a strarr-value corresponding to a given C-style string.\

")

(* ****** ****** *)

#declnamesynop("strarr_make_substring")

(* ****** ****** *)

#declnamesynop("strarr_get_at")

(* ****** ****** *)

#declnamesynop("strarr_get_at_gint")
#decldescrpt("\

Given a strarr-value and an integer i, this function returns
character i in the string represented by the strarr-value. It
is O(1)-time.\

")

#declnamesynop("strarr_get_at_guint")
#decldescrpt("\

This function does the same as #dyncode("strarr_get_at_gint")
except for taking as its second argument an unsigned integer.

")

(* ****** ****** *)

#declnamesynop("strarr_get_range")

#decldescrpt("\

Given a strarr-value str of length n and two sizes i0 and i1 satisfying i0
<= n and i1 <= n, this function returns a string str2 of length n2
satisfying the following conditions: (1) if i0 <= i1, then n2 equals i1-i0
and str2[k] = str[i0+k] for 0 <= k < n2; (2) if i1 < i0, then n2 equals
i0-i1 and str2[k]=str[i0-k-1] for 0 <= k < n2. For instance, if i0 and i1
equal n and 0, respectively, then str2 is the reverse of str.  If either
the second or the third argument of the function exceeds n, then it is
replaced with n.  The time complexity of the function is O(n2), where n2 is
the length of the returned string.

")


(* ****** ****** *)

#declnamesynop("print_strarr")
#decldescrpt("This function prints a given strarr-value onto STDOUT.")
#declnamesynop("prerr_strarr")
#decldescrpt("This function prints a given strarr-value onto STDERR.")

(* ****** ****** *)

#declnamesynop("fprint_strarr")

(* ****** ****** *)

#declnamesynop("strarr_copy")
#decldescrpt("\
Given a strarr-value, this function returns a copy of it.
")

(* ****** ****** *)

#declnamesynop("strarr_append")
#decldescrpt("\

This function, which overload the symbol #dyncode("+"), returns the
concatenation of two given strings. It is O(n)-time, where n is the length
of the returned strarr-value.

")

(* ****** ****** *)

#declnamesynop("strarr_tabulate")
#decldescrpt("\

Given a size n and a function f, this function returns an strarr-value str
of size n such that each str[i] is initialized with the value returned by f(i),
where i ranges from 0 until n-1, inclusive.\

")

(* ****** ****** *)

#declnamesynop("strarr_foreach")
#decldescrpt("\

This function traverses its first argument (a string) from the start to the
end and applies to each encountered character its second argument (a
closure-function).\

")
#declexample("\

The following code prints a given string onto the standard output channel:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/strarr.sats"
//
implement
main0 () =
{
  val out = stdout_ref
  val cs = (strarr)"abcdefg"
  val () = strarr_foreach (cs, lam (c) => fprint_char (out, c))
  val () = fprint_newline (out)
} // end of [main0]
')
")

(* ****** ****** *)

#declnamesynop("strarr_iforeach")

(* ****** ****** *)

#declnamesynop("strarr_rforeach")
#decldescrpt("\

This function traverses its first argument (a string) from the end to the
start and applies to each encountered character its second argument (a
closure-function).\

")
#declexample("\

The following code prints the reverse of a given string onto the standard
output channel:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/strarr.sats"
//
implement
main0 () =
{
  val out = stdout_ref
  val cs = (strarr)"abcdefg"
  val () = strarr_rforeach (cs, lam (c) => fprint_char (out, c))
  val () = fprint_newline (out)
} // end of [main0]
')
")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("+")

(* ****** ****** *)

#declnamesynop("[]")

(* ****** ****** *)

#declnamesynop("iseqz")
#declnamesynop("isneqz")

(* ****** ****** *)

#declnamesynop("<")
#declnamesynop("<=")
#declnamesynop(">")
#declnamesynop(">=")
#declnamesynop("=")
#declnamesynop("!=")
#declnamesynop("compare")

(* ****** ****** *)

#declnamesynop("length")

(* ****** ****** *)

#declnamesynop("print")
#declnamesynop("prerr")
#declnamesynop("fprint")

(* ****** ****** *)

(* end of [strarr.atxt] *)
