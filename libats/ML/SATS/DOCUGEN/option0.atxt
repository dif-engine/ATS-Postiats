(* ****** ****** *)

%{
implement srcfilename_get () = "../option0.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_ML_option0")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/ML/option0\
")

(* ****** ****** *)

#declpreamble("\

The functions declared in this package are primarily for supporting
ML-style processing of option-values. The programmer is encouraged to use
the dependent datatype #stacode("option") instead of #stacode("option0")
after gaining some familiarity with dependent types.

")

(* ****** ****** *)

#declname("option0")
#declsynopsis2("\

The full name of the option0-type constructor is
#stacode("option0_t0ype_type"), which is given to the datatype declared as
follows:

#pats2xhtmls('\
datatype // t@ype+: covariant
option0_t0ype_type
  (a: t@ype+) = Some0 of (a) | None0 of ()
// end of [option0_t0ype_type]
')
")

(* ****** ****** *)

#declnamesynop("option0_of_option")
#decldescrpt("\
This function casts an option-value of indexed type to an option-value of
unindexed type.
")
#declnamesynop("option0_of_option_vt")
#decldescrpt("\
This function casts a linear option-value of indexed type to an option-value of
unindexed type.
")

(* ****** ****** *)

#declnamesynop("g0ofg1_option")
#decldescrpt("\

This function, which overloads the symbol #dyncode("g0ofg1"), casts an
option-value of indexed type to another option-value of unindexed type.  ")

#declnamesynop("g1ofg0_option")
#decldescrpt("\

This function, which overloads the symbol #dyncode("g1ofg0"), casts an
option-value of unindexed type to another option-value of indexed type.  ")

(* ****** ****** *)

#declnamesynop("option0_none")
#decldescrpt('\
This is just the function version of the constructor #dyncode("None0").
')

#declnamesynop("option0_some")
#decldescrpt('\
This is just the function version of the constructor #dyncode("Some0").
')

(* ****** ****** *)

#declnamesynop("option0_is_none")
#decldescrpt('\
This funtion returns true if and only a given option-value is formed with
the constructor #dyncode('None0').
')

#declnamesynop("option0_is_some")
#decldescrpt('\
This funtion returns true if and only a given option-value is formed with
the constructor #dyncode('Some0').
')

(* ****** ****** *)

#declnamesynop("option0_unsome_exn")
#decldescrpt('\

If a given option-value is of the form #dyncode("Some0(v)"), then
this function returns the value v. Otherwise, it raises an exception
(#dyncode("NotSomeExn")).\

')

(* ****** ****** *)

#declnamesynop("option0_map")
#decldescrpt('\

Given an option-value opt and a function f, this function returns
#dyncode("Some0(f(v))") if opt is of the form
#dyncode("Some0(v)"). Otherwise, it returns #dyncode("None0()").\

')

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("g0ofg1")
#declnamesynop("g1ofg0")

(* ****** ****** *)

#declnamesynop("iseqz")
#declnamesynop("isneqz")

(* ****** ****** *)

#declnamesynop("fprint")

(* ****** ****** *)

(* end of [option0.atxt] *)
