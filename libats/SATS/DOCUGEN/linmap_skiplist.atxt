(* ****** ****** *)

%{
implement srcfilename_get () = "../linmap_skiplist.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_linmap_skiplist")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/linmap_skiplist\
")

(* ****** ****** *)

#declpreamble("\

#para("\

This package implements a linear map based on the (randomized) skip-list
structure.")

#para("\

While skip-lists are interesting, maps based on them are not as efficient
as those based on balanced trees such as AVL-trees and red-black-trees. An
often claimed advantage of skip-lists is that they are easier to implement
than balanced trees. This, however, is not supported in ATS. With proper
use of types, it seems on the contrary that correctly implementing balanced
trees in ATS is significantly easier than skip-lists.  So this package is
largely for educational purpose, demonstrating a reasonable approach to
handling inherently imperative structures like skip-list.")

")

(* ****** ****** *)

#declnamesynop("map")
#decldescrpt("\

The type constructor #stacode("map") is a shorthand for
#stacode("map_vtype").  ")

(* ****** ****** *)

#declnamesynop("map_vtype")
#decldescrpt("\

Given a type K and a viewtype T, the abstract viewtype
#stacode("map_vtype(K, T)") is for a map storing links from keys of the
type K to items of the viewtype T. Note that #stacode("map_vtype") is
co-variant in its second argument.\

")

(* ****** ****** *)

#declnamesynop("compare_key_key")
#decldescrpt("This function is for comparing map keys.")

(* ****** ****** *)

#declnamesynop("linmap_make_nil")
#decldescrpt("This function creates an empty map.")

(* ****** ****** *)

#declnamesynop("linmap_is_nil")
#decldescrpt("This function tests whether a given map is empty.")
#declnamesynop("linmap_isnot_nil")
#decldescrpt("This function tests whether a given map is non-empty.")

(* ****** ****** *)

#declnamesynop("linmap_size")

(* ****** ****** *)

#declnamesynop("linmap_search")
#decldescrpt("\

This function searches for key [k0] in a given map [map]. If found, the
item assciated with [k0] is put into [res], and the boolean value true is
returned.  Otherwise, the boolean value false is returned.  ")

#declfunretval("\

The boolean value returned by this function indicates whether the key [k0]
appears in the given map.")

#declnamesynop("linmap_search_ref")
#decldescrpt("\

This function searches for key [k0] in a given map [map]. If found, a
non-null pointer is returned which points to the location where the item
associated with [k0] is stored. Otherwize, the null pointer is returned.\
")

#declnamesynop("linmap_search_opt")
#decldescrpt("\

This function is the optional version of #dyncode("linmap_search").  ")

(* ****** ****** *)

#declnamesynop("linmap_insert")
#decldescrpt("\

This function inserts a link from [k0] to [x0] into a given map [map].
In the case where the key [k0] is already associated with some item in
the given map, this function replaces the item with [x0] and then stores
the item into [res]. The returned value indicates wether replacement is
actually performed.\

")

#declnamesynop("linmap_insert_opt")
#decldescrpt("\

This function is the optional version of #dyncode("linmap_insert").\

")

#declnamesynop("linmap_insert_any")
#decldescrpt("\

This function inserts a link from [k0] to [x0] into a given map [map].
Note that it carries out insertion regardless whether the key [k0] is
already associated with some item in the given map.\

")

(* ****** ****** *)

#declnamesynop("linmap_takeout")
#decldescrpt("\

If key k0 can be found in a given map, this function takes out the item
associated with [k0] from the map, puts it into [res] and then returns the
boolean value true. Otherwise, it simply returns the boolean value false.  ")

#declnamesynop("linmap_takeout_opt")
#decldescrpt("\

This function is the optional version of #dyncode("linmap_takeout").  ")

#declnamesynop("linmap_remove")

#decldescrpt("\

This function is similar to #dyncode("linmap_takeout") except that it
discards the item associated with [k0] if it is taken out. Note that the
type for items stored in the map is assumed to be non-linear. ")


(* ****** ****** *)

#declnamesynop("linmap_foreach")
#decldescrpt("\

This function traverses a given map, applying the function implemented by
#dyncode("linmap_foreach$fwork") to the key and item stored in each node.
")

#declnamesynop("linmap_foreach_env")
#decldescrpt("\

This function is similar to #dyncode("linmap_foreach") except taking an
environment as an extra argument.  ")

#declnamesynop("linmap_foreach$fwork")

(* ****** ****** *)

#declnamesynop("linmap_free")
#decldescrpt("\

This function frees a given map containing only non-linear items. ")

(* ****** ****** *)

#declnamesynop("linmap_freelin")
#declnamesynop("linmap_freelin$clear")

(* ****** ****** *)

#declnamesynop("linmap_free_ifnil")
#decldescrpt("\

Given a map, this function frees it and returns false if the map is empty.
Otherwise, the function keeps the map and returns true. ")

(* ****** ****** *)

#declnamesynop("linmap_listize")
#decldescrpt("\

This function returns a linear list of pairs consisting of keys and
their associated items in a given map while freeing the map. ")

(* ****** ****** *)

#declnamesynop("linmap_flistize")
#decldescrpt("\

What this function does is essentially to apply
#dyncode("linmap_flistize$fopr") to each pair in the list returned by
#dyncode("linmap_listize"). However, the actual implementation is more
efficient.\

")

#declnamesynop("linmap_flistize$fopr")

(* ****** ****** *)

#declnamesynop("linmap_listize1")
#decldescrpt("\

This function returns a linear list of pairs consisting of keys and their
associated items in a given map while keeping the map. Note that the items
are assumed to be of a non-linear type.\

")

(* ****** ****** *)

#declnamesynop("linmap_skiplist_initize")
#decldescrpt("\

This function is called to initialize the random number generator employed
in the skip-list implementation.\

")

(* ****** ****** *)

(* end of [linmap_skiplist.atxt] *)
