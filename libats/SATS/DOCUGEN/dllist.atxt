(* ****** ****** *)

%{
implement srcfilename_get () = "../dllist.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_dllist")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/dllist\
")

(* ****** ****** *)

#declpreamble('\

#para('\

This package contains a variety of common functions for creating/freeing
and manipulating doubly-linked linear lists.  ')

#para('\

The type for a doubly-linked linear list containing N elements of type T is
denoted by #stacode("dllist(T, F, R)"), where T can be linear, and F and R
(satisfying F+R=N) indicate that there are F and R elements before and after
the current pointer, respectively. Note that the type constructor
#stacode("dllist") is co-variant in its first argument, that is,
#stacode("dllist(T1, F, R)") is a subtype of #stacode("dllist(T2, F, R)")
if T1 is a subtype of T2. The low-level representation for dllist is the
same as that for a standard doubly-linked list in C, and it is fairly
straightforward to implement functions in C that can directly manipulate
doubly linked linear lists in ATS and vice versa.  ')

')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("dllist")
#declnamesynop("dllist_vtype")

(* ****** ****** *)

#declnamesynop("lemma1_dllist_param")
#declnamesynop("lemma2_dllist_param")
#declnamesynop("lemma3_dllist_param")

(* ****** ****** *)

#declnamesynop("dllist_nil")
#declnamesynop("dllist_free_nil")

(* ****** ****** *)

#declnamesynop("dllist_sing")
#decldescrpt('\

Given a value, this function returns a singleton list containing the value.\

')

(* ****** ****** *)

#declnamesynop("dllist_cons")
#declnamesynop("dllist_uncons")

(* ****** ****** *)

#declnamesynop("dllist_snoc")
#declnamesynop("dllist_unsnoc")

(* ****** ****** *)

#declnamesynop("dllist_is_nil")
#decldescrpt('\

This function tests whether a given list is empty.

')

#declnamesynop("dllist_is_cons")
#decldescrpt('\

This function tests whether a given list is non-empty.\

')

(* ****** ****** *)

#declnamesynop("dllist_is_atbeg")
#decldescrpt('\

This function tests whether the segment before the current pointer of a
given list is empty.\

')

#declnamesynop("dllist_is_atend")
#decldescrpt('\

This function tests whether the segment after the current pointer of a
given list is singleton.\

')

(* ****** ****** *)

#declnamesynop("rdllist_is_atbeg")
#declnamesynop("rdllist_is_atend")

(* ****** ****** *)

#declnamesynop("dllist_getref_elt")
#declnamesynop("dllist_getref_next")
#declnamesynop("dllist_getref_prev")

(* ****** ****** *)

#declnamesynop("dllist_get_elt")
#declnamesynop("dllist_set_elt")

(* ****** ****** *)

#declnamesynop("dllist_length")
#declnamesynop("rdllist_length")

(* ****** ****** *)

#declnamesynop("dllist_move")
#declnamesynop("dllist_move_all")
#declnamesynop("rdllist_move")
#declnamesynop("rdllist_move_all")

(* ****** ****** *)

#declnamesynop("dllist_insert_next")
#decldescrpt('\

This function inserts a node into a given list immediately
after the current node (to which the current pointer points).

')

#declnamesynop("dllist_insert_prev")
#decldescrpt('\

This function inserts a node into a given list immediately
before the current node (to which the current pointer points).

')

(* ****** ****** *)

#declnamesynop("dllist_takeout")
#declnamesynop("dllist_takeout_next")

(* ****** ****** *)

#declnamesynop("rdllist_insert")
#declnamesynop("rdllist_takeout")

(* ****** ****** *)

#declnamesynop("dllist_append")
#declnamesynop("rdllist_append")

(* ****** ****** *)

#declnamesynop("dllist_reverse")
#declnamesynop("rdllist_reverse")

(* ****** ****** *)

#declnamesynop("dllist_free")
#declnamesynop("dllist_freelin$clear")
#declnamesynop("dllist_freelin")

(* ****** ****** *)

#declnamesynop("dllist_foreach")
#declnamesynop("dllist_foreach_env")

(* ****** ****** *)

#declnamesynop("rdllist_foreach")
#declnamesynop("rdllist_foreach_env")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("fprint")

(* ****** ****** *)

(* end of [dllist.atxt] *)
